@using arkAS.BLL
@model IEnumerable<vas_mailStatuses>

@{
    ViewBag.Title = "Работа с почтой";
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}

@Styles.Render("~/content/Cabinet.css")

@*<ul class="nav nav-tabs">
    <li role="presentation">@Html.ActionLink("Документы", "Documents", "Document")</li>
    <li role="presentation">@Html.ActionLink("Счета", "Invoices", "Invoice")</li>
    <li role="presentation" class="active">@Html.ActionLink("Почта", "Mails", "Mail")</li>
    <li role="presentation">@Html.ActionLink("Контрагенты", "Contractors", "Contractor")</li>
</ul>*@

<div class="mailCont"></div>

<div class='checkStatuses hide'>
    <input type="checkbox" data-code='nostatus' value='0' /><label>Не установлен</label>&nbsp;&nbsp;&nbsp;&nbsp;
    @foreach (var item in Model)
    {
        <input type="checkbox" data-code='@item.code' value='@item.id' id='svOurSup@(item.id)' />
        <label for='svOurSup@(item.id)'>@item.name</label>
        @Html.Raw("&nbsp; &nbsp; &nbsp; &nbsp;")
    }
</div>

@section js{
    <script type="text/javascript">
        var sourceStatuses = @Html.Raw(js.Serialize(Model.Select(x => new { Value = x.id, Text = x.name, Selected = false })));
        var sourceStatusesEditable = @Html.Raw(js.Serialize(Model.Select(x => new { value = x.id, text = x.name })));

        var asmail = {
            init: function () {
                asmail.initMainTable();
                $(document).delegate('.createMail', 'click', function (e) {
                    e.preventDefault();
                    asmail.createItem();
                });
            },
            initMainTable: function () {
                as.crud.init({
                    cont: $('.mailCont'),
                    title: 'Работа с почтой',
                    toolbarAdditional: '<a href="#" class="btn btn-primary createMail">Создать</a>',
                    groupOperationsToolbar: '',
                    ajaxURLFormat: '/Vasilyev/Mail/Mails_{0}',
                    inlineAjaxURL: "/Vasilyev/Mail/MailsInLine",
                    pageSize: 15,
                    cookiePrefix: "as-crud-MailsDict-",
                    emptyText: 'Нет элементов',
                    createLinkTitle: 'Создать сообщение',
                    filterLinkTitle: 'Найти',
                    filterTitle: 'Фильтрация данных',
                    showChecksCol: false,
                    showNumsCol: true,
                    showToolbar: true,
                    showColSettings: false,
                    showReplaceTool: false,
                    showExcelExport: false,
                    additionalSort: false,
                    cols: [
                    { code: "id", title: "ID", tooltip: "Идентификатор", isVisible: false, isPK: true, datatype: "int", isRequired: false, editHide: true },
                    { code: "from", title: "От", tooltip: "Адрес отправителя", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null, editable: { type: "text", format: "{0}", callback: function (el, newValue) { }}},
                    { code: "to", title: "Кому", tooltip: "Адрес доставки", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null, editable: { type: "text", format: "{0}", callback: function (el, newValue) { }}},
                    { code: "trackNumber", title: "Номер", tooltip: "Номер сообщения", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null},
                    { code: "mailSystem", title: "Система", tooltip: "Почтовая система", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null, editable: { type: "text", format: "{0}", callback: function (el, newValue) { }}},
                    { code: "date", filter: { type: "daterange" }, title: "Дата создания", editHide: true, tooltip: "Дата создания", isVisible: true, isPK: false, datatype: "date", isRequired: false, format: "{0}", isSort: true, callback: null },
                    { code: "trackNumberRepay", title: "Обратный номер", tooltip: "Обратный номер", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: false, callback: null},
                    { code: "dateReplay", title: "Дата ответа", editHide: true, tooltip: "Дата ответа", isVisible: true, isPK: false, datatype: "date", isRequired: false, format: "{0}", isSort: true, callback: null },
                    { code: "status", title: "Статус", tooltip: "Статус", isVisible: true, isPK: false, datatype: "select", isRequired: false, format: "{0}", isSort: true, editSources: sourceStatuses, callback: null, editable: { type: "select", format: "{0}", source: sourceStatusesEditable, notSelected: "Не установлено", callback: function (el, newValue) { }}},
                    { code: "comment", title: "Комментарий", tooltip: "Комментарий", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null, editable: { type: "text", format: "{0}", callback: function (el, newValue) { }}},
                    { code: "code", title: "Код", tooltip: "Код документа", isVisible: false, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null}
                    ],
                    operations: {
                        create: false,
                        remove: true,
                        edit: false,
                        other:[]
                    },
                    getFilterMakeup: function (filter) {
                        var s = [];
                        s.push("<div class='crdFilterItem'><span class='gCap'>От</span><input type='text' class='mailFrom' value='" + (filter.from || '') + "' /></div>");
                        s.push("<div class='crdFilterItem'><span class='gCap'>Кому</span><input type='text' class='mailTo' value='" + (filter.to || '') + "' /></div>");

                        $('.checkStatuses input').removeAttr('checked');
                        if (filter.statusIDs) {
                            $.each(filter.statusIDs, function (i, item) {
                                $('.checkStatuses input[value=' + item + ']').attr('checked', 'checked');
                            })
                        }
                        s.push("<span class='gCap'>Статус</span><div class='mailStatuses'>" + $('.checkStatuses').html() + "</div><br /><br />");
                        return s.join("");
                    },
                    filter: function () {
                        var statusIDs = [];
                        $('.mailStatuses input:checked').each(function () {
                            statusIDs.push($(this).attr('value'));
                        });

                        var filter = {
                            from: $('.mailFrom').val() || "",
                            to: $('.mailTo').val() || "",
                            statusIDs: statusIDs
                        };
                        return filter;
                    },
                });
            },
            createItem: function () {
                var s = [];
                s.push("<span>От</span><input type='text' class='form-control newMailFrom' /><br />");
                s.push("<span>Кому</span><input type='text' class='form-control newMailTo' /><br />");

                setTimeout(function () { $('.newMail').focus(); }, 200);
                as.sys.showDialog("Создание сообщения", s.join(""), "Сохранить", function () {
                    var from = $('.newMailFrom').val();
                    var to = $('.newMailTo').val();
                    if (!from) {
                        as.sys.bootstrapAlert("Укажите пожалуйста адрес отправителя", { type: 'warning' });
                        $('.newMailFrom').focus();
                        return;
                    }
                    if (!to) {
                        as.sys.bootstrapAlert("Укажите пожалуйста адрес получателя", { type: 'warning' });
                        $('.newMailTo').focus();
                        return;
                    }
                    var params = {
                        from: from,
                        to: to,
                    };
                    as.sys.ajaxSend("/Vasilyev/Mail/CreateMail", params, function (data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');
                        if (data.result) {
                            as.sys.bootstrapAlert("Элемент сохранен", { type: 'success' });
                            as.sys.closeDialog();
                            as.crud.getItems();
                            setTimeout(function () {
                                as.crud.gotoItem(data.itemID);
                            }, 1000);
                        } else {
                            as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                });
            },
        }
        $(function () {
            asmail.init();
        });

    </script>
}
