@using arkAS.BLL
@model arkAS.Areas.Vasilyev.Models.DocumentViewModel

@{
    ViewBag.Title = "Работа с документами";
    var js = new System.Web.Script.Serialization.JavaScriptSerializer();
}

@Styles.Render("~/content/Cabinet.css")

@*<ul class="nav nav-tabs">
        <li role="presentation" class="active">@Html.ActionLink("Документы", "Documents", "Document")</li>
        <li role="presentation">@Html.ActionLink("Счета", "Invoices", "Invoice")</li>
        <li role="presentation">@Html.ActionLink("Почта", "Mails", "Mail")</li>
        <li role="presentation">@Html.ActionLink("Контрагенты", "Contractors", "Contractor")</li>
    </ul>*@

<div class="docCont"></div>


<select class='checkType hide'>
    <option value="0">Не выбрано</option>
    @foreach (var item in Model.Types)
    {
        <option value='@item.id'>@item.name</option>
    }
</select>

<select class='checkContractor hide'>
    <option value="0">Не выбрано</option>
    @foreach (var item in Model.Contractors)
    {
        <option value='@item.id'>@item.name</option>
    }
</select>

<div class='checkStatuses hide'>
    <input type="checkbox" data-code='nostatus' value='0' /><label>Не установлен</label>&nbsp;&nbsp;&nbsp;&nbsp;
    @foreach (var item in Model.Statuses)
    {
        <input type="checkbox" data-code='@item.code' value='@item.id' id='svOurSup@(item.id)' />
        <label for='svOurSup@(item.id)'>@item.name</label>
        @Html.Raw("&nbsp; &nbsp; &nbsp; &nbsp;")
    }
</div>

@section js{
    <script type="text/javascript">
        var sourceStatuses = @Html.Raw(js.Serialize(Model.Statuses.Select(x => new { Value = x.id, Text = x.name, Selected = false })));
        var sourceStatusesEditable = @Html.Raw(js.Serialize(Model.Statuses.Select(x => new { value = x.id, text = x.name })));

        var asdoc = {
            init: function () {
                asdoc.initMainTable();
                $(document).delegate('.usCreateDoc', 'click', function (e) {
                    e.preventDefault();
                    asdoc.createItem();
                });
            },
            initMainTable: function () {
                as.crud.init({
                    cont: $('.docCont'),
                    title: 'Работа с документами',
                    toolbarAdditional: '<a href="#" class="btn btn-primary usCreateDoc">Создать</a>',
                    groupOperationsToolbar: '',
                    ajaxURLFormat: '/Vasilyev/Document/Documents_{0}',
                    inlineAjaxURL: "/Vasilyev/Document/DocumentsInLine",
                    pageSize: 15,
                    cookiePrefix: "as-crud-DocsDict-",
                    emptyText: 'Нет элементов',
                    createLinkTitle: 'Создать документ',
                    filterLinkTitle: 'Найти',
                    filterTitle: 'Фильтрация данных',
                    showChecksCol: false,
                    showNumsCol: true,
                    showToolbar: true,
                    showColSettings: false,
                    showReplaceTool: false,
                    showExcelExport: false,
                    additionalSort: false,
                    cols: [
                    { code: "id", title: "ID", tooltip: "Идентификатор", isVisible: false, isPK: true, datatype: "int", isRequired: false, editHide: true },
                    { code: "name", title: "Название", tooltip: "Название документа", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null, editable: { type: "text", format: "{0}", callback: function (el, newValue) { }}},
                    { code: "number", title: "Номер документа", tooltip: "Номер документа", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null},
                    { code: "date", filter: { type: "daterange" }, title: "Дата создания", editHide: true, tooltip: "Дата создания", isVisible: true, isPK: false, datatype: "date", isRequired: false, format: "{0}", isSort: true, callback: null },
                    { code: "sum", title: "Сумма", tooltip: "Сумма", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null, editable: { type: "text", format: "{0}", callback: function (el, newValue) { }}},
                    { code: "type", title: "Тип", tooltip: "Тип документа", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: false, callback: null},
                    { code: "status", title: "Статус", tooltip: "Статус", isVisible: true, isPK: false, datatype: "select", isRequired: false, format: "{0}", isSort: true, editSources: sourceStatuses, callback: null, editable: { type: "select", format: "{0}", source: sourceStatusesEditable, notSelected: "Не установлено", callback: function (el, newValue) { }}},
                    { code: "contractor", title: "Контрагент", tooltip: "Контрагент", isVisible: true, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null},
                    { code: "code", title: "Код", tooltip: "Код документа", isVisible: false, isPK: false, datatype: "string", isRequired: true, format: "{0}", isSort: true, callback: null}
                    ],
                    operations: {
                        create: false,
                        remove: true,
                        edit: false,
                        other:[]
                    },
                    getFilterMakeup: function (filter) {
                        var s = [];
                        s.push("<div class='crdFilterItem'><span class='gCap'>Название</span><input type='text' class='docName' value='" + (filter.name || '') + "' /></div>");

                        $('.checkType option').removeAttr('selected');
                        $('.checkType option[value=' + filter.typeID + ']').attr('selected', 'selected');
                        s.push("<div class='crdFilterItem'><span class='gCap'>Тип</span><select class='docType'>" + $('.checkType').html() + "</select></div>");

                        $('.checkContractor option').removeAttr('selected');
                        $('.checkContractor option[value=' + filter.contractorID + ']').attr('selected', 'selected');
                        s.push("<div class='crdFilterItem'><span class='gCap'>Контрагент</span><select class='docContractor'>" + $('.checkContractor').html() + "</select></div>");

                        $('.checkStatuses input').removeAttr('checked');
                        if (filter.statusIDs) {
                            $.each(filter.statusIDs, function (i, item) {
                                $('.checkStatuses input[value=' + item + ']').attr('checked', 'checked');
                            })
                        }
                        s.push("<span class='gCap'>Статус</span><div class='docStatuses'>" + $('.checkStatuses').html() + "</div><br /><br />");
                        return s.join("");
                    },
                    filter: function () {
                        var statusIDs = [];
                        $('.docStatuses input:checked').each(function () {
                            statusIDs.push($(this).attr('value'));
                        });

                        var filter = {
                            name: $('.docName').val() || "",
                            typeID: $('.docType option:selected').val(),
                            contractorID: $('.docContractor option:selected').val(),
                            statusIDs: statusIDs
                        };
                        return filter;
                    },
                });
            },
            createItem: function () {
                var s = [];
                s.push("<span>Название документа</span><input type='text' class='form-control newDocName' /><br />");

                $('.checkType option').removeAttr('selected');
                $('.checkType option:first').attr('selected', 'selected');
                s.push("<span>Тип</span><select class='form-control newDocTypeID' >"+ $('.checkType').html() + "</select><br />");

                $('.checkContractor option').removeAttr('selected');
                $('.checkContractor option:first').attr('selected', 'selected');
                s.push("<span>Контрагент</span><select class='form-control newDocContractorID' >"+ $('.checkContractor').html() + "</select><br />");

                setTimeout(function () { $('.newDocument').focus(); }, 200);
                as.sys.showDialog("Создание документа", s.join(""), "Сохранить", function () {
                    var name = $('.newDocName').val();
                    var typeID = $('.newDocTypeID option:selected').val();
                    var contractorID = $('.newDocContractorID option:selected').val();
                    if (!name) {
                        as.sys.bootstrapAlert("Укажите пожалуйста название", { type: 'warning' });
                        $('.newDocName').focus();
                        return;
                    }
                    if (!typeID || typeID == 0) {
                        as.sys.bootstrapAlert("Выберите пожалуйста тип", { type: 'warning' });
                        $('.newDocTypeID').focus();
                        return;
                    }
                    if (!contractorID || contractorID == 0) {
                        as.sys.bootstrapAlert("Укажите пожалуйста контрагента", { type: 'warning' });
                        $('.newDocContractorID').focus();
                        return;
                    }
                    var params = {
                        name: name,
                        typeID: typeID,
                        contractorID: contractorID
                    };
                    as.sys.ajaxSend("/Vasilyev/Document/CreateDocument", params, function (data) {
                        if (typeof (data) != "object") data = eval('(' + data + ')');
                        if (data.result) {
                            as.sys.bootstrapAlert("Элемент сохранен", { type: 'success' });
                            as.sys.closeDialog();
                            as.crud.getItems();
                            setTimeout(function () {
                                as.crud.gotoItem(data.itemID);
                            }, 1000);
                        } else {
                            as.sys.bootstrapAlert(data.msg || "Возникли ошибки при выполнении операции!", { type: 'danger' });
                        }
                    });
                });
            },
        }
        $(function () {
            asdoc.init();
        });

    </script>
}
